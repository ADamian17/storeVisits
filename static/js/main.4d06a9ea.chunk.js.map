{"version":3,"sources":["components/DaysCount.js","containers/StoreVisitContainer.js","App.js","serviceWorker.js","index.js"],"names":["DaysCount","props","bar","width","daysCount","in_count","height","backgroundColor","strDate","date","dateArr","Date","toDateString","split","displayDate","storeCount","className","style","StoreVcontainer","state","chartData","token","requestedAt","getData","a","async","axios","post","getToken","get","headers","data","setState","toLocaleTimeString","handleRefresh","this","inCount","map","days","index","key","type","onClick","Component","App","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTAsCeA,G,MAnCG,SAAAC,GAEhB,IAAMC,EAAM,CACVC,MAAM,GAAD,OAAKF,EAAMG,UAAUC,SAArB,MACLC,OAAO,OACPC,gBAAgB,WAGZC,EAAUP,EAAMG,UAAUK,KAE1BC,EADO,IAAIC,KAAKH,GAASI,eACVC,MAAM,SACrBC,EAAW,UAAMJ,EAAQ,GAAd,YAAoBA,EAAQ,IACvCK,EAAad,EAAMG,UAAUC,SAEnC,OACE,oCACE,yBAAKW,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,SACf,wBAAIA,UAAU,+BAA+BF,IAE7C,yBAAKE,UAAU,SACb,yBAAKA,UAAU,kBAAkBC,MAAOf,KAE1C,yBAAKc,UAAU,SACf,wBAAIA,UAAU,+BAA+BD,UCsC1CG,E,2MAzDbC,MAAQ,CACNC,UAAW,GACXC,MAAO,GACPC,YAAa,I,EAQfC,QAAU,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAEeE,IAAMC,KAAK,kCAChC,CACE,cAAiB,kCAJb,cAEFC,EAFE,kBAAAJ,EAAA,MAOgBE,IAAMG,IAAI,iDAAkD,CAACC,QAAQ,CAC3F,cAAgB,UAAhB,OAA2BF,EAASG,KAAKA,KAAKV,OAC9C,eAAgB,uBATV,OAOFD,EAPE,OAYR,EAAKY,SAAS,CACZZ,UAAWA,EAAUW,KAAKA,KAC1BV,MAAOO,EAASG,KAAKA,KAAKV,MAC1BC,aAAa,IAAIX,MAAOsB,uBAflB,sC,EAqBVC,cAAgB,WACd,EAAKX,W,mFAzBLY,KAAKZ,Y,+BA6BL,IAAMa,EAAUD,KAAKhB,MAAMC,UAAUiB,KAAI,SAACC,EAAMC,GAAP,OAAkB,kBAAC,EAAD,CAAWC,IAAKD,EAAOnC,UAAWkC,OAC7F,OACA,6BACE,yBAAKtB,UAAU,WACb,yBAAKA,UAAU,OACb,4BAAQyB,KAAK,SAASzB,UAAU,eAAe0B,QAASP,KAAKD,eAA7D,WAA4F,8BAAM,6CAAmBC,KAAKhB,MAAMG,gBAGpI,yBAAKN,UAAU,WACb,yBAAKA,UAAU,OACZoB,S,GAjDmBO,a,MCafC,MAhBf,WACE,OACE,oCACA,yBAAK5B,UAAU,yDACb,wBAAIA,UAAU,YAAd,iBAGF,0BAAM6B,KAAK,OAAO7B,UAAU,aAC1B,yBAAKA,UAAU,uCACb,kBAAC,EAAD,UCFY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d06a9ea.chunk.js","sourcesContent":["import React from 'react'\nimport './DaysCount.css'\n\nconst DaysCount = props => {\n   \n  const bar = {\n    width: `${props.daysCount.in_count}px`,\n    height: `20px`,\n    backgroundColor: `#000000`,\n  }\n  \n  const strDate = props.daysCount.date;\n  const date = new Date(strDate).toDateString();\n  const dateArr = date.split(/[ ,]+/); //split at the space\n  const displayDate = `${dateArr[0]} ${dateArr[2]}`;\n  const storeCount = props.daysCount.in_count;\n\n  return (\n    <> \n      <div className=\"card\">\n        <div className=\"card-body\">\n          <div className=\"row justify-content-center\">\n            <div className=\"col-3\">\n            <h5 className=\"card-title text-center mt-2\">{displayDate}</h5>\n            </div>\n            <div className=\"col-6\" >\n              <div className=\"mt-2 pogressBar\" style={bar}></div>\n            </div>\n            <div className=\"col-3\">\n            <h5 className=\"card-title mt-2 text-center\">{storeCount}</h5>\n            </div>\n          </div>\n        </div>\n      </div>    \n    </>  \n  )\n} \n\nexport default DaysCount;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nimport DaysCount from '../components/DaysCount';\n// import Chart from '../components/Chart/Chart';\n\n\nclass StoreVcontainer extends Component {\n\n  state = {\n    chartData: [],\n    token: '',\n    requestedAt: '',\n  }\n\n\n  componentDidMount () {\n    this.getData()\n  }\n   \n  getData = async () => {\n\n    const getToken = await axios.post(\"http://api.getdor.com/v1/tokens\",\n      {\n        \"refresh_token\": \"wSGgSqmSDKS4YPfMSHZ4YyiOpiNv\"\n      }\n    ) \n    const chartData = await axios.get(\"http://api.getdor.com/v1/teams/4/stores/4/days\", {headers:{\n      \"authorization\": `Bearer ${getToken.data.data.token}`,\n      \"Content-Type\": \"application/json\"\n    }})\n    \n    this.setState({\n      chartData: chartData.data.data,\n      token: getToken.data.data.token,\n      requestedAt: new Date().toLocaleTimeString()\n    })\n  }\n\n\n  \n  handleRefresh = () => {\n    this.getData();\n  }\n  \n  render () {\n    const inCount = this.state.chartData.map((days, index) =>  <DaysCount key={index} daysCount={days}/>)\n    return (\n    <div> \n      <div className=\"row p-2\">\n        <div className=\"col\">\n          <button type=\"button\" className=\"btn btn-link\" onClick={this.handleRefresh}>Refresh</button><span><b>Last update at {this.state.requestedAt}</b></span>\n        </div> \n      </div>\n      <div className=\"row p-2\">\n        <div className=\"col\">\n          {inCount}\n          {/* <Chart chartData={this.state.chartData} /> */}\n        </div>\n      </div>\n    </div>  \n    )\n  }\n}\n\n\nexport default StoreVcontainer;","import React from 'react';\n\nimport StoreVisitscontainer from './containers/StoreVisitContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark my-header\">\n      <h3 className=\"navTitle\">Store Visits</h3>\n    </nav>\n\n    <main role=\"main\" className=\"container\">\n      <div className=\"my-3 p-3 bg-white rounded shadow-sm\">\n        <StoreVisitscontainer />\n      </div>\n    </main>\n  </>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}